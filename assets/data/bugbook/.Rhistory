authors %>%
distinct(Author) %>%
as.list() %>% unlist()
authors %>%
distinct(Country) %>%
nrow()
authors %>%
distinct(City) %>%
nrow()
authors_per_chapter <- authors %>%
group_by(Chapter) %>%
summarise(UniqueAuthors = n_distinct(Author))
authors_per_chapter
ggplot(authors_per_chapter, aes(x = Chapter, y = UniqueAuthors)) +
geom_bar(stat = "identity", fill = "#FF6B35") +
theme_minimal() +
labs(title = "Number of Unique Authors per Chapter", x = "Chapter", y = "Unique Authors") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(authors_per_chapter, aes(x = factor(Chapter), y = UniqueAuthors)) +
geom_bar(stat = "identity", fill = "#FF6B35") +
theme_minimal() +
labs(title = "Number of Unique Authors per Chapter", x = "Chapter", y = "Unique Authors") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(authors_per_chapter, aes(x = factor(Chapter), y = UniqueAuthors)) +
geom_bar(stat = "identity", fill = "#FF6B35") +
theme_minimal() +
labs(title = "Number of Unique Authors per Chapter", x = "Chapter", y = "Unique Authors") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(authors_per_chapter, aes(x = Chapter, y = UniqueAuthors)) +
geom_bar(stat = "identity", fill = "#FF6B35") +
scale_x_continuous(breaks = seq(1, 13, 1)) +
theme_minimal() +
labs(title = "Number of Unique Authors per Chapter", x = "Chapter", y = "Unique Authors") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
chapters_per_author <- authors %>%
group_by(Author) %>%
summarise(ChaptersContributed = n_distinct(Chapter))
top_authors <- chapters_per_author %>%
arrange(desc(ChaptersContributed)) %>%
head(20)
ggplot(top_authors, aes(x = reorder(Author, ChaptersContributed), y = ChaptersContributed)) +
geom_bar(stat = "identity", fill = "#2C5F5D") +
coord_flip() +
theme_minimal() +
labs(title = "Top 20 Authors by Number of Chapters Contributed", x = "Author", y = "Chapters Contributed")
ggplot(authors_per_chapter, aes(x = Chapter, y = UniqueAuthors)) +
geom_bar(stat = "identity", fill = "#FF6B35") +
scale_x_continuous(breaks = seq(1, 13, 1)) +
theme_minimal() +
labs(title = "Number of Unique Authors per Chapter", x = "Chapter", y = "Unique Authors") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(authors_by_country, aes(x = "", y = n, fill = Country)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "Authors by Country")
authors_by_country <- authors %>%
distinct(Author, Country) %>%
count(Country)
ggplot(authors_by_country, aes(x = "", y = n, fill = Country)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "Authors by Country")
library(igraph)
# Build edge list: authors who appear together in chapters
edges <- authors %>%
group_by(Chapter) %>%
summarise(Authors = list(unique(Author))) %>%
pull(Authors) %>%
lapply(function(x) t(combn(x, 2))) %>%
do.call(rbind, .) %>%
as.data.frame() %>%
setNames(c("from", "to"))
authors %>%
group_by(Chapter) %>%
summarise(Authors = list(unique(Author)))
authors %>%
group_by(Chapter) %>%
summarise(Authors = list(unique(Author)))
edges <- authors %>%
group_by(Chapter) %>%
summarise(Authors = list(unique(Author)))
edges <- authors %>%
group_by(Chapter) %>%
summarise(Authors = list(unique(Author))) %>%
pull(Authors)
edges <- authors %>%
group_by(Chapter) %>%
summarise(Authors = list(unique(Author))) %>%
pull(Authors) %>%
lapply(function(x) t(combn(x, 2)))
authors %>%
group_by(Chapter) %>%
summarise(Authors = list(unique(Author)), .groups = "drop") %>%
pull(Authors) %>%
# Only create combinations if there are at least 2 authors
lapply(function(x) if(length(x) >= 2) t(combn(x, 2)) else NULL)
edges <- authors %>%
group_by(Chapter) %>%
summarise(Authors = list(unique(Author)), .groups = "drop") %>%
pull(Authors) %>%
# Only create combinations if there are at least 2 authors
lapply(function(x) if(length(x) >= 2) t(combn(x, 2)) else NULL) %>%
# Remove NULLs (chapters with <2 authors)
Filter(Negate(is.null), .) %>%
# Combine all edges into a single matrix/data.frame
do.call(rbind, .) %>%
as.data.frame() %>%
setNames(c("from", "to"))
# Create and plot the graph
g <- graph_from_data_frame(edges, directed = FALSE)
plot(g, vertex.size = 5, vertex.label.cex = 0.7, main = "Co-authorship Network")
library(dplyr)
library(igraph)
library(visNetwork)
install.packages("visNetwork")
library(visNetwork)
edges <- authors %>%
group_by(Chapter) %>%
summarise(Authors = list(unique(Author)), .groups = "drop") %>%
pull(Authors) %>%
lapply(function(x) if(length(x) >= 2) t(combn(x, 2)) else NULL) %>%
Filter(Negate(is.null), .) %>%
do.call(rbind, .) %>%
as.data.frame() %>%
setNames(c("from", "to"))
# Create graph
g <- graph_from_data_frame(edges, directed = FALSE)
# Create nodes and edges data frames for visNetwork
nodes <- data.frame(id = V(g)$name, label = V(g)$name, stringsAsFactors = FALSE)
edges_vis <- as_data_frame(g, what = "edges")
# Plot interactive network
visNetwork(nodes, edges_vis) %>%
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
visLayout(randomSeed = 123)
edges <- authors %>%
group_by(Chapter) %>%
summarise(Authors = list(unique(Author)), .groups = "drop") %>%
pull(Authors) %>%
lapply(function(x) if(length(x) >= 2) t(combn(x, 2)) else NULL) %>%
Filter(Negate(is.null), .) %>%
do.call(rbind, .) %>%
as.data.frame() %>%
setNames(c("from", "to"))
# Create graph
g <- graph_from_data_frame(edges, directed = FALSE)
# Create nodes/edges for visNetwork
nodes <- data.frame(
id = V(g)$name,
label = V(g)$name,  # Show labels by default
font.size = 20,      # Larger text
color = "#2C5F5D"    # Node color
)
edges_vis <- as_data_frame(g, what = "edges")
# Create interactive plot with stabilization
visNetwork(nodes, edges_vis) %>%
visOptions(
highlightNearest = list(enabled = TRUE, degree = 1),
nodesIdSelection = TRUE
) %>%
visPhysics(  # Stabilization settings
stabilization = list(
enabled = TRUE,
iterations = 1000  # More iterations = more stable
),
solver = "barnesHut",  # Better for larger networks
barnesHut = list(
gravitationalConstant = -2000,  # Adjust for node spacing
springLength = 150
)
) %>%
visLayout(randomSeed = 123)  # Consistent initial layout
library(networkD3)
#  Build edge list (same as before)
edges <- authors %>%
group_by(Chapter) %>%
summarise(Authors = list(unique(Author)), .groups = "drop") %>%
pull(Authors) %>%
lapply(function(x) if(length(x) >= 2) t(combn(x, 2)) else NULL) %>%
Filter(Negate(is.null), .) %>%
do.call(rbind, .) %>%
as.data.frame() %>%
setNames(c("source", "target"))
# Create a unique list of authors for node indices
authors <- unique(c(edges$source, edges$target))
# Create a unique list of authors for node indices
authors <- unique(c(edges$source, edges$target))
nodes <- data.frame(name = authors, stringsAsFactors = FALSE)
# Map author names to indices for networkD3
edges$source <- match(edges$source, nodes$name) - 1  # 0-based indexing
edges$target <- match(edges$target, nodes$name) - 1
# Create the interactive force-directed network
forceNetwork(
Links = edges,
Nodes = nodes,
Source = "source",
Target = "target",
NodeID = "name",
fontSize = 16,
linkDistance = 100,
charge = -300,
opacity = 0.85,
zoom = TRUE,
colourScale = JS("d3.scaleOrdinal(d3.schemeCategory10);")
)
# Create nodes data frame with a dummy group
authors <- unique(c(edges$source, edges$target))
nodes <- data.frame(
name = authors,
group = 1,  # All nodes in one group; change to a grouping variable if desired
stringsAsFactors = FALSE
)
# Map author names to indices for networkD3 (0-based)
edges$source <- match(edges$source, nodes$name) - 1
edges$target <- match(edges$target, nodes$name) - 1
# Interactive network plot with labels
forceNetwork(
Links = edges,
Nodes = nodes,
Source = "source",
Target = "target",
NodeID = "name",   # This will be used as the label
Group = "group",   # Required argument
fontSize = 16,
linkDistance = 100,
charge = -300,
opacity = 0.85,
zoom = TRUE,
colourScale = JS("d3.scaleOrdinal(d3.schemeCategory10);")
)
# Create interactive plot with stabilization
visNetwork(nodes, edges_vis) %>%
visOptions(
highlightNearest = list(enabled = TRUE, degree = 1),
nodesIdSelection = TRUE
) %>%
visPhysics(  # Stabilization settings
stabilization = list(
enabled = TRUE,
iterations = 1000  # More iterations = more stable
),
solver = "barnesHut",  # Better for larger networks
barnesHut = list(
gravitationalConstant = -2000,  # Adjust for node spacing
springLength = 150
)
) %>%
visLayout(randomSeed = 123)  # Consistent initial layout
edges <- authors %>%
group_by(Chapter) %>%
summarise(Authors = list(unique(Author)), .groups = "drop") %>%
pull(Authors) %>%
lapply(function(x) if(length(x) >= 2) t(combn(x, 2)) else NULL) %>%
Filter(Negate(is.null), .) %>%
do.call(rbind, .) %>%
as.data.frame() %>%
setNames(c("from", "to"))
# Create graph
g <- graph_from_data_frame(edges, directed = FALSE)
library(visNetwork)
edges <- authors %>%
group_by(Chapter) %>%
summarise(Authors = list(unique(Author)), .groups = "drop") %>%
pull(Authors) %>%
lapply(function(x) if(length(x) >= 2) t(combn(x, 2)) else NULL) %>%
Filter(Negate(is.null), .) %>%
do.call(rbind, .) %>%
as.data.frame() %>%
setNames(c("from", "to"))
edges <- authors %>%
dplyr::group_by(Chapter) %>%
summarise(Authors = list(unique(Author)), .groups = "drop") %>%
pull(Authors) %>%
lapply(function(x) if(length(x) >= 2) t(combn(x, 2)) else NULL) %>%
Filter(Negate(is.null), .) %>%
do.call(rbind, .) %>%
as.data.frame() %>%
setNames(c("from", "to"))
# Create graph
g <- graph_from_data_frame(edges, directed = FALSE)
# Create nodes/edges for visNetwork
nodes <- data.frame(
id = V(g)$name,
label = V(g)$name,  # Show labels by default
font.size = 20,      # Larger text
color = "#2C5F5D"    # Node color
)
edges_vis <- as_data_frame(g, what = "edges")
# Create interactive plot with stabilization
visNetwork(nodes, edges_vis) %>%
visOptions(
highlightNearest = list(enabled = TRUE, degree = 1),
nodesIdSelection = TRUE
) %>%
visPhysics(  # Stabilization settings
stabilization = list(
enabled = TRUE,
iterations = 1000  # More iterations = more stable
),
solver = "barnesHut",  # Better for larger networks
barnesHut = list(
gravitationalConstant = -2000,  # Adjust for node spacing
springLength = 150
)
) %>%
visLayout(randomSeed = 123)  # Consistent initial layout
edges <- authors %>%
group_by(Chapter) %>%
summarise(Authors = list(unique(Author)), .groups = "drop") %>%
pull(Authors) %>%
# Only create combinations if there are at least 2 authors
lapply(function(x) if(length(x) >= 2) t(combn(x, 2)) else NULL) %>%
# Remove NULLs (chapters with <2 authors)
Filter(Negate(is.null), .) %>%
# Combine all edges into a single matrix/data.frame
do.call(rbind, .) %>%
as.data.frame() %>%
setNames(c("from", "to"))
authors <- read_excel("bugbook_data.xlsx", sheet = "authors")
library(tidyverse)
library(readxl)
library(reactable)
library(leaflet)
library(htmltools)
authors <- read_excel("bugbook_data.xlsx", sheet = "authors")
library(igraph)
# Build edge list: authors who appear together in chapters
edges <- authors %>%
group_by(Chapter) %>%
summarise(Authors = list(unique(Author))) %>%
pull(Authors) %>%
lapply(function(x) t(combn(x, 2))) %>%
do.call(rbind, .) %>%
as.data.frame() %>%
setNames(c("from", "to"))
edges <- authors %>%
group_by(Chapter) %>%
summarise(Authors = list(unique(Author)), .groups = "drop") %>%
pull(Authors) %>%
# Only create combinations if there are at least 2 authors
lapply(function(x) if(length(x) >= 2) t(combn(x, 2)) else NULL) %>%
# Remove NULLs (chapters with <2 authors)
Filter(Negate(is.null), .) %>%
# Combine all edges into a single matrix/data.frame
do.call(rbind, .) %>%
as.data.frame() %>%
setNames(c("from", "to"))
# Create and plot the graph
g <- graph_from_data_frame(edges, directed = FALSE)
plot(g, vertex.size = 5, vertex.label.cex = 0.7, main = "Co-authorship Network")
library(dplyr)
library(igraph)
library(visNetwork)
edges <- authors %>%
dplyr::group_by(Chapter) %>%
summarise(Authors = list(unique(Author)), .groups = "drop") %>%
pull(Authors) %>%
lapply(function(x) if(length(x) >= 2) t(combn(x, 2)) else NULL) %>%
Filter(Negate(is.null), .) %>%
do.call(rbind, .) %>%
as.data.frame() %>%
setNames(c("from", "to"))
# Create graph
g <- graph_from_data_frame(edges, directed = FALSE)
# Create nodes/edges for visNetwork
nodes <- data.frame(
id = V(g)$name,
label = V(g)$name,  # Show labels by default
font.size = 20,      # Larger text
color = "#2C5F5D"    # Node color
)
edges_vis <- as_data_frame(g, what = "edges")
# Create interactive plot with stabilization
visNetwork(nodes, edges_vis) %>%
visOptions(
highlightNearest = list(enabled = TRUE, degree = 1),
nodesIdSelection = TRUE
) %>%
visPhysics(  # Stabilization settings
stabilization = list(
enabled = TRUE,
iterations = 1000  # More iterations = more stable
),
solver = "barnesHut",  # Better for larger networks
barnesHut = list(
gravitationalConstant = -2000,  # Adjust for node spacing
springLength = 150
)
) %>%
visLayout(randomSeed = 123)  # Consistent initial layout
View(authors)
edges <- authors %>%
filter(chapter != 5) %>%
dplyr::group_by(Chapter) %>%
summarise(Authors = list(unique(Author)), .groups = "drop") %>%
pull(Authors) %>%
lapply(function(x) if(length(x) >= 2) t(combn(x, 2)) else NULL) %>%
Filter(Negate(is.null), .) %>%
do.call(rbind, .) %>%
as.data.frame() %>%
setNames(c("from", "to"))
edges <- authors %>%
filter(Chapter != 5) %>%
dplyr::group_by(Chapter) %>%
summarise(Authors = list(unique(Author)), .groups = "drop") %>%
pull(Authors) %>%
lapply(function(x) if(length(x) >= 2) t(combn(x, 2)) else NULL) %>%
Filter(Negate(is.null), .) %>%
do.call(rbind, .) %>%
as.data.frame() %>%
setNames(c("from", "to"))
# Create graph
g <- graph_from_data_frame(edges, directed = FALSE)
# Create nodes/edges for visNetwork
nodes <- data.frame(
id = V(g)$name,
label = V(g)$name,  # Show labels by default
font.size = 20,      # Larger text
color = "#2C5F5D"    # Node color
)
edges_vis <- as_data_frame(g, what = "edges")
# Create interactive plot with stabilization
visNetwork(nodes, edges_vis) %>%
visOptions(
highlightNearest = list(enabled = TRUE, degree = 1),
nodesIdSelection = TRUE
) %>%
visPhysics(  # Stabilization settings
stabilization = list(
enabled = TRUE,
iterations = 1000  # More iterations = more stable
),
solver = "barnesHut",  # Better for larger networks
barnesHut = list(
gravitationalConstant = -2000,  # Adjust for node spacing
springLength = 150
)
) %>%
visLayout(randomSeed = 123)  # Consistent initial layout
edges <- authors %>%
filter(Chapter != 5) %>%
dplyr::group_by(Chapter) %>%
summarise(Authors = list(unique(Author)), .groups = "drop")
View(edges)
authors %>%
distinct(Author)
authors %>%
distinct(Author)
authors %>%
distinct(Author, .keep_all = TRUE)
authors %>%
distinct(Author, .keep_all = TRUE) %>%
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
#addTiles() %>%  # Adds the default OpenStreetMap map tiles
addCircleMarkers(
~Long, ~Lat,
popup = ~paste(
"<b>Author: </b>", Author, # author
"<br><b>Institute: </b>", Institution # institution
),
clusterOptions = markerClusterOptions(
spiderfyOnMaxZoom = TRUE,  # Enable spiderfy
showCoverageOnHover = FALSE,
zoomToBoundsOnClick = TRUE),
radius = 6,             # Point size
color = "#FF6B35",      # Vibrant orange for visibility
fillOpacity = 0.9
)
View(authors)
authors %>%
group_by(Author, Institution, City, Country, Lat, Long) %>%
summarise(
Chapters = paste(sort(unique(Chapter)), collapse = ", "),
.groups = "drop"
)
author_summary <- authors %>%
group_by(Author, Institution, City, Country, Lat, Long) %>%
summarise(
Chapters = paste(sort(unique(Chapter)), collapse = ", "),
.groups = "drop"
)
View(author_summary)
authors %>%
group_by(Author, Institution, City, Country, Lat, Long) %>%
summarise(
Chapters = paste(sort(unique(Chapter)), collapse = ", "),
.groups = "drop"
) %>%
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
#addTiles() %>%  # Adds the default OpenStreetMap map tiles
addCircleMarkers(
~Long, ~Lat,
popup = ~paste(
"<b>Author: </b>", Author, # author
"<br><b>Institute: </b>", Institution # institution
),
clusterOptions = markerClusterOptions(
spiderfyOnMaxZoom = TRUE,  # Enable spiderfy
showCoverageOnHover = FALSE,
zoomToBoundsOnClick = TRUE),
radius = 6,             # Point size
color = "#FF6B35",      # Vibrant orange for visibility
fillOpacity = 0.9
)
authors %>%
group_by(Author, Institution, City, Country, Lat, Long) %>%
summarise(
Chapters = paste(sort(unique(Chapter)), collapse = ", "),
.groups = "drop")
